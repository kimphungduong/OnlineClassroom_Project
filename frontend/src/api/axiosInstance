import axios from 'axios';
import jwtDecode from 'jwt-decode';
import { store } from '~/store'; // Import Redux store
import { refreshToken, logout, setTokens } from '~/store/slices/authSlice';

let isRefreshing = false;
let refreshSubscribers = [];

// Hàm thêm yêu cầu chờ token mới
const addRefreshSubscriber = (callback) => {
  refreshSubscribers.push(callback);
};

// Thông báo cho các yêu cầu đang chờ khi token mới có sẵn
const onAccessTokenRefreshed = (newAccessToken) => {
  refreshSubscribers.forEach((callback) => callback(newAccessToken));
  refreshSubscribers = [];
};

// Kiểm tra token có hết hạn không
const isTokenExpired = (token) => {
  if (!token) return true; // Nếu không có token, xem như đã hết hạn
  const { exp } = jwtDecode(token); // Decode token để lấy thời gian hết hạn
  return Date.now() >= exp * 1000; // So sánh thời gian hiện tại với thời gian hết hạn
};

// Tạo Axios instance
const axiosInstance = axios.create({
  baseURL: 'http://localhost:3000', // Thay URL của bạn
  withCredentials: true, // Gửi cookie nếu cần
});

// Interceptor cho các yêu cầu trước khi gửi
axiosInstance.interceptors.request.use(
  async (config) => {
    const { accessToken } = store.getState().auth;

    if (!accessToken || isTokenExpired(accessToken)) {
      if (!isRefreshing) {
        isRefreshing = true;

        try {
          // Gọi Redux action để làm mới token
          const response = await store.dispatch(refreshToken()).unwrap();
          const { accessToken: newAccessToken } = response;

          // Cập nhật token mới vào Redux store
          store.dispatch(setTokens({ accessToken: newAccessToken }));

          // Thông báo cho các yêu cầu đang chờ
          onAccessTokenRefreshed(newAccessToken);
        } catch (error) {
          // Nếu làm mới token thất bại, đăng xuất người dùng
          store.dispatch(logout());
          return Promise.reject(error);
        } finally {
          isRefreshing = false;
        }
      }

      // Đợi token mới nếu đang làm mới
      return new Promise((resolve) => {
        addRefreshSubscriber((newAccessToken) => {
          config.headers['Authorization'] = `Bearer ${newAccessToken}`;
          resolve(config);
        });
      });
    }

    // Nếu token còn hạn, thêm vào header
    config.headers['Authorization'] = `Bearer ${accessToken}`;
    return config;
  },
  (error) => Promise.reject(error)
);

// Interceptor cho các phản hồi (nếu cần xử lý lỗi toàn cục)
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    return Promise.reject(error);
  }
);

export default axiosInstance;
